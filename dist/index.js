!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("validateForm",[],t):"object"==typeof exports?exports.validateForm=t():e.validateForm=t()}(this,(()=>(()=>{"use strict";var e={d:(t,r)=>{for(var o in r)e.o(r,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:r[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{validateForm:()=>s});const r={get(e,t){if("colors"===t&&e.colors&&("object"!=typeof e.colors||null===e.colors))return console.warn("Invalid colors object. Defaulting to { error: 'maroon', success: '#5cb85c' }."),{error:"maroon",success:"#5cb85c"};if("validate"===t){const t=["submit","input","change","blur"];if(e.validate&&!t.includes(e.validate))return console.warn(`Invalid validation event '${e.validate}'. Awailable options: ${t.join(", ")}. Defaulting to 'submit'.`),"submit"}if("rules"===t){if(e.rules&&"object"!=typeof e.rules)return console.warn("Rules should be an object. Ignoring invalid rules."),{};for(const[t,r]of Object.entries(e.rules||{}))Array.isArray(r)&&r.every((e=>"function"==typeof e))||(console.warn(`Invalid rules for '${t}'. Ignoring.`),e.rules[t]=[])}return e[t]}};class o{validationStates=["valueMissing","typeMismatch","patternMismatch","tooLong","tooShort","rangeUnderflow","rangeOverflow","stepMismatch","badInput","customError"];constructor(e,t){this.form=e,this.isValid=!0,this.inputs=e.querySelectorAll("input, textarea, select")||[],this.options=new Proxy(t,r),this.colors={error:this.options?.colors?.error||"maroon",success:this.options?.colors?.success||"#5cb85c"},this.validateOn=this.options?.validate||"submit",this.errorMessages=this.options?.errorMessages,this.rules=this.options?.rules||{},this.init()}init(){this.setupEventListeners(),this.setStyles(),this.form.setAttribute("novalidate",!0)}setStyles(){if(document.querySelector("#form-validator-styles"))return;const e=document.createElement("style");e.id="form-validator-styles",e.textContent=`\n      .validation-wrapper{\n        position: relative;\n        display: inherit;\n      }\n      .input-invalid {\n        outline: none;\n        border-color: ${this.colors.error};\n        color: ${this.colors.error};\n      }\n      .input-valid {\n        outline: none;\n        border-color: ${this.colors.success};\n        color: ${this.colors.success};\n      }\n      .error-message {\n        color: ${this.colors.error};\n        display: block;\n        bottom: 4px;\n      }\n    `,document.head.appendChild(e)}setupEventListeners(){this.form.addEventListener("submit",this.validateForm.bind(this)),this.form.querySelectorAll("input").forEach((e=>{"submit"==this.validateOn?e.addEventListener("input",(()=>this.clearError(e))):e.addEventListener(this.validateOn,(()=>this.validateInput(e)))}))}validateForm(e){e.preventDefault(),this.isValid=!0,this.inputs.forEach((e=>{this.validateInput(e)||(this.isValid=!1)})),this.isValid&&this.form.submit()}validateInput(e){let t=e.closest(".validation-wrapper");t||(t=document.createElement("div"),t.classList.add("validation-wrapper"),e.parentNode.insertBefore(t,e),t.appendChild(e));let r="";return this.validationStates.forEach((t=>{e.validity[t]&&(r=this.errorMessages?.[t]||e.validationMessage)})),!r&&this.rules[e.name]&&this.rules[e.name].forEach((t=>{const o=t(e.value);o&&(r=o)})),r?(this.showError(e,r),!1):(e.classList.add("input-valid"),this.clearError(e),!0)}showError(e,t){e.classList.add("input-invalid"),e.classList.remove("input-valid");let r=e.parentNode.querySelector(".error-message");r||(r=document.createElement("span"),r.classList.add("error-message"),e.parentNode.appendChild(r)),r.textContent=t,e.setAttribute("aria-describedby",r.id||"error-"+e.name)}clearError(e){e.classList.remove("input-invalid");const t=e.parentNode.querySelector(".error-message");t&&t.remove()}}const s=(e,t={})=>(function(e){if(!(e instanceof HTMLFormElement))throw new TypeError("FormValidator expects a valid <form> element as the first argument.");e.querySelectorAll("input, textarea, select").length||console.warn("No inputs for validation")}(e),new o(e,t));return t})()));